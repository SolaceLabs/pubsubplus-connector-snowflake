# --------------------------
# SAMPLE CONFIGURATION
# --------------------------

spring:
  boot:
    admin:
      client:
        enabled: true
        url: 
        auto-registration: true
        instance:
          name: 
          service-url: 
    application:
      name: 
  cloud:

    # For more info about Spring Cloud Stream and the Solace PubSub+ binder:
    # - https://docs.spring.io/spring-cloud-stream/docs/current/reference/html/spring-cloud-stream.html
    # - https://github.com/SolaceProducts/solace-spring-cloud/tree/master/solace-spring-cloud-starters/solace-spring-cloud-stream-starter
    stream:
      bindings:  # Workflow bindings
        input-0:
          destination:    # Queue name
          binder: solace
          consumer:
            concurrency: 1
            batchMode: true
        output-0:
          destination:   # SolaceSnowflakeConnector producer destination
          binder: solace-snowflake-stream   # solace-snowflake-stream   or solace-snowflake-jdbc
          content-type: application/x-java-serialized-object

#      binding-retry-interval: 30  # The interval (in seconds) between retrying binding creation. Set it to zero to treat such conditions as fatal, preventing the application from starting.
      solace:
        bindings:
          input-0:
            consumer:
              batchMaxSize: 2                         #to consume the events in batch if >1
              batchTimeout: 5000
              provisionSubscriptionsToDurableQueue: false
              provisionDurableQueue: false
              queueNamePrefix: ""
              useFamiliarityInQueueName: false
              useDestinationEncodingInQueueName: false
              useGroupNameInQueueName: false
    config:
      import-check:
        enabled: false
solace:
  connector:
    workflows:  # Workflow configuration
      0:
        enabled: true  # If true, the workflow is enabled.
      1:
        enabled: false  # If true, the workflow is enabled.

#        transform-headers:  # Per-Processor headers transform configuration
#          expressions:  # A mapping of header names to header value SpEL expressions. The SpEL context contains the `headers` parameter which can be used to read the input message’s headers.
#            new-header: "'prefix-' + headers.id"  # Example
#        transform-payloads:  # Per-Processor payloads transform configuration
#          expressions:  # A list of a single transformation as a SpEL expression
#            - transform: "#isPayloadBytes(payload) ? new String(payload).toUpperCase() : payload instanceof T(String) ? payload.toUpperCase() : payload"  # Example

#    management:
#      leader-election:
#        mode: standalone  # The connector’s leader election mode. (values: standalone, active_active, active_standby)
#        fail-over:
#          max-attempts: 3  # The maximum number of attempts to perform a fail-over.
#          back-off-initial-interval: 1000  # The initial interval (milliseconds) to back-off when retrying a fail-over.
#          back-off-max-interval: 10000  # The maximum interval (milliseconds) to back-off when retrying a fail-over.
#          back-off-multiplier: 2.0  # The multiplier to apply to the back-off interval between each retry of a fail-over.
#      queue:   # The management queue name.
#      session:  # The management session. This has the same interface as that used by `solace.java.*`. For more info: https://github.com/SolaceProducts/solace-spring-boot/tree/master/solace-spring-boot-starters/solace-java-spring-boot-starter#updating-your-application-properties
#        host:   # The management Solace connection
#        msgVpn: 
#        client-username: 
#        client-password: 

    security:
      enabled: false  # If true, security is enabled. Otherwise, anyone has access to the connector’s endpoints.
#      csrf-enabled: true  # If true, CSRF protection is enabled. Makes sense only if solace.connector.security.enabled is true.
#      users:  # User configuration
#        - name: <user-name>  # The name of this user.
#          password: <user-password>  # The password for this user.
#          roles:  # The list of roles which this user has. Has read-only access if no roles are given. (values: admin)
#            - <role>

#        - name: user  # Example: Creates a read-only user
#          password: pass
#        - name: admin  # Example: Creates a user with admin role
#          password: admin
#          roles:
#            - admin


  java:  # Solace PubSub+ connection details. For more info: https://github.com/SolaceProducts/solace-spring-boot/tree/master/solace-spring-boot-starters/solace-java-spring-boot-starter#updating-your-application-properties
    host:    # workflow Solace connection
    msgVpn: 
    clientUsername: 
    clientPassword: 
    connectRetries: -1
    reconnectRetries: -1


management:
  metrics:  # Metrics monitoring systems. For more info: https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html#actuator.metrics
    export:
#      defaults:
#        enabled: false
      simple:
        enabled: true
#      <system>:
#        enabled: false
#  endpoint:
#    health:
#      show-components: never
#      show-details: never
  endpoints:
    jmx:
      exposure:
        exclude: "*"
    web:  # Actuator web endpoint configuration. For more info: https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html#actuator.endpoints. Initial set of metrics is defined as a bare minimum for Connector Manager compatibility. To shrink it simply remove unnecessary ones
      exposure:
        include: "health,metrics,loggers,logfile,channels,env,workflows,leaderelection,bindings"
        exclude: "diskSpace,mappings"

#logging:  # Logging configuration. For more info: https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.logging
#  level:
#    root: warn
#    com.solace.connectors: TRACE # Enables TRACE logs for connector
#    com.solace.connector.core: TRACE # Enables TRACE logs for connector framework
#    com.solace.spring.cloud.stream.binder: TRACE # Enables TRACE logs for Solace binder
#  file:
#    name: myapp.log  # base log file name. Example: Generates a log file to a file named myapp.log.
#  logback:
#    rollingpolicy:  # Logback file rolling policy
#      file-name-pattern: "${LOG_FILE}.%d{yyyy-MM-dd}.%i.gz"  # Pattern for rolled-over log file names. Example: Rolls the log file into an archive once every day. `%i` is reset to `0` at the start of the day.
#      max-file-size: 100MB  # The maximum size of log file before it is archived. Example: Within a given day, when the log file reaches 100 MB, archive it, and increment `%i`.
#      max-history: 7  # The maximum rotation-period's worth of archive log files to keep. Example: Since the `file-name-pattern` is configured to rollover once every day, keep 7 days worth of log archives.
#      total-size-cap: 1GB  # Total size of log backups for a given rotation period. Example: Keep up-to 1 GB of log archives for every day.

#server:
#  port: 8090

snowflake:
  name: 
  redirectOnFailEnable: true
  redirectPrefix: 
  database: 
  schema: 
  warehouse: 
  protocol: 
  username: 
  port: 
  account: 
  snHost: 
  topicMap:
  key: 

  # snowflake jdbc config
#  schemaMapping: true
#  stageNamePattern: TESTSTAGE_{TABLE_NAME}_{CONNECTOR_NAME} # pattern variable : TABLE_NAME, CONNECTOR_NAME ,must contain stage ,case ignored
#  pipeNamePattern:  TEST_TESTPIPE_{TABLE_NAME}_{CONNECTOR_NAME} # pattern variable : TABLE_NAME, CONNECTOR_NAME, must contain pipe ,case ignored
#  bufferEvents: 3
#  bufferEventSizeLimit: 10240
#  bufferEventWaitTime: 10
#  stageCleanFrequency: 120

  # snowflake stream config
  role: 
  onError: continue   #abort or continue
  ackInterval: 10
  enableBatchInsert: false
  onErrorAckSingleAbort: true
#  topicNodeMap: solace/*/cdc/>:payload.after,

jasypt:
  encryptor:
    password: 
    algorithm: 
    iv-generator-classname: org.jasypt.iv.NoIvGenerator
